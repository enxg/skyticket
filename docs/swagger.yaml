definitions:
  models.Event:
    properties:
      date:
        example: "2025-12-07T19:00:00Z"
        type: string
      id:
        example: 68f0c6a8f5673dc0ec646731
        type: string
      name:
        example: FORMULA 1 ETIHAD AIRWAYS ABU DHABI GRAND PRIX 2025
        type: string
      venue:
        example: YTÜ Davutpaşa Tarihi Hamam
        type: string
    type: object
  models.Reservation:
    properties:
      customer_name:
        example: Lewis Hamilton
        type: string
      event_id:
        example: 68f0c6a8f5673dc0ec646731
        type: string
      id:
        example: 68f4fea9990e605d6589b5f3
        type: string
      reservation_date:
        example: "2025-10-1T15:00:00Z"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.ReservationStatus'
        example: ACTIVE
      ticket_id:
        example: 68f2ab0516a352dc8f40c543
        type: string
    type: object
  models.ReservationStatus:
    enum:
    - ACTIVE
    - CANCELLED
    type: string
    x-enum-varnames:
    - ReservationStatusActive
    - ReservationStatusCancelled
  models.Ticket:
    properties:
      event_id:
        example: 68f0c6a8f5673dc0ec646731
        type: string
        x-order: "1"
      id:
        example: 68f2ab0516a352dc8f40c543
        type: string
        x-order: "0"
      price:
        example: 4999
        type: integer
        x-order: "3"
      seat_number:
        example: A12
        type: string
        x-order: "2"
      status:
        allOf:
        - $ref: '#/definitions/models.TicketStatus'
        example: AVAILABLE
        x-order: "4"
    type: object
  models.TicketStatus:
    enum:
    - AVAILABLE
    - RESERVED
    type: string
    x-enum-varnames:
    - TicketStatusAvailable
    - TicketStatusReserved
  requests.CreateEventRequest:
    properties:
      date:
        example: "2025-12-07T16:00:00+03:00"
        type: string
      name:
        example: FORMULA 1 ETIHAD AIRWAYS ABU DHABI GRAND PRIX 2025
        type: string
      venue:
        example: YTÜ Davutpaşa Tarihi Hamam
        type: string
    required:
    - date
    - name
    - venue
    type: object
  requests.CreateReservationRequest:
    properties:
      customer_name:
        example: Enes Genç
        type: string
    required:
    - customer_name
    type: object
  requests.CreateTicketRequest:
    properties:
      price:
        example: 4999
        type: integer
      seat_number:
        example: A12
        type: string
    required:
    - price
    - seat_number
    type: object
  requests.UpdateEventRequest:
    properties:
      date:
        example: "2025-12-07T16:00:00+03:00"
        type: string
      name:
        example: FORMULA 1 ETIHAD AIRWAYS ABU DHABI GRAND PRIX 2025
        type: string
      venue:
        example: YTÜ Davutpaşa Tarihi Hamam
        type: string
    type: object
  requests.UpdateReservationRequest:
    properties:
      customer_name:
        example: Enes Genç
        type: string
    type: object
  requests.UpdateTicketRequest:
    properties:
      price:
        example: 4999
        type: integer
      seat_number:
        example: A12
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      message:
        example: Error message
        type: string
    type: object
  responses.ValidationErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/validator.ValidationError'
        type: array
    type: object
  validator.ValidationError:
    properties:
      error:
        example: Error message for the field
        type: string
      field:
        example: field_name
        type: string
    type: object
host: skyticket.enesgenc.dev
info:
  contact:
    email: hello@enesgenc.dev
    name: Enes Genç
    url: https://enesgenc.dev
  description: This is the API documentation for SkyTicket.
  license:
    name: MIT
    url: https://github.com/enxg/skyticket/blob/main/LICENSE
  title: SkyTicket
  version: "1.0"
paths:
  /events:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all events with their details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Event'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get all events
      tags:
      - Events
    post:
      consumes:
      - application/json
      description: Create a new event with the provided details
      parameters:
      - description: Event details
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/requests.CreateEventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new event
      tags:
      - Events
  /events/{eventId}/tickets:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all tickets for an event with their details
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ticket'
            type: array
        "404":
          description: Event not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get all tickets for an event
      tags:
      - Tickets
    post:
      consumes:
      - application/json
      description: Create a ticket with the provided details
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Ticket details
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/requests.CreateTicketRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Ticket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "404":
          description: Event not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Seat number is already taken
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a ticket
      tags:
      - Tickets
  /events/{eventId}/tickets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a ticket by its ID
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Ticket not found for the given event
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete a ticket
      tags:
      - Tickets
    get:
      consumes:
      - application/json
      description: Get details of a ticket by its ID
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "404":
          description: Ticket not found for the given event
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get ticket by ID
      tags:
      - Tickets
    patch:
      consumes:
      - application/json
      description: Update the details of an existing ticket by its ID
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated ticket details
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateTicketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "404":
          description: Ticket not found for the given event
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update an existing ticket
      tags:
      - Tickets
  /events/{eventId}/tickets/{ticketId}/reservation:
    delete:
      consumes:
      - application/json
      description: Cancel and delete an existing reservation
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Ticket ID
        in: path
        name: ticketId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Cancel a reservation
      tags:
      - Reservations
    get:
      consumes:
      - application/json
      description: Get reservation details for a ticket
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Ticket ID
        in: path
        name: ticketId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Reservation'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get reservation
      tags:
      - Reservations
    patch:
      consumes:
      - application/json
      description: Update details of an existing reservation
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Ticket ID
        in: path
        name: ticketId
        required: true
        type: string
      - description: Updated reservation details
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateReservationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Reservation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update a reservation
      tags:
      - Reservations
    post:
      consumes:
      - application/json
      description: Create a reservation for a ticket
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Ticket ID
        in: path
        name: ticketId
        required: true
        type: string
      - description: Reservation details
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/requests.CreateReservationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Reservation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "404":
          description: Ticket/event not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Ticket is already reserved / Event date has already passed
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a reservation
      tags:
      - Reservations
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Deleted
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete an event
      tags:
      - Events
    get:
      consumes:
      - application/json
      description: Get details of an event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get event by ID
      tags:
      - Events
    patch:
      consumes:
      - application/json
      description: Update the details of an existing event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated event details
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update an existing event
      tags:
      - Events
schemes:
- https
swagger: "2.0"
tags:
- description: APIs related to event management in SkyTicket.
  name: Events
- description: APIs related to ticket management in SkyTicket. SkyTicket expects monetary
    values to be represented in the smallest currency units ("kuruş" for Turkish lira)
    to avoid floating-point precision issues.
  name: Tickets
- description: APIs related to ticket reservations in SkyTicket.
  name: Reservations
